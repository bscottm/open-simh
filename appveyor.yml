cache:
  - cmake\dependencies -> appveyor.yml, **\CMakeLists.txt, cmake\dep-targets.cmake

## shallow_clone: true
## clone_depth: 50

environment:
  DIST_DIR: '%APPVEYOR_BUILD_FOLDER%\dist'
  CMAKE_DIST_DIR: C:/projects/simh/dist

  matrix:
   - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
     SIMH_BUILD_FLAVOR: vs2022

   - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
     SIMH_BUILD_FLAVOR: vs2019

   - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
     SIMH_BUILD_FLAVOR: unix

   - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1604
     SIMH_BUILD_FLAVOR: unix

   - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
     SIMH_BUILD_FLAVOR: unix

    ## (broken cmake)     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    ## (broken cmake)       SIMH_BUILD_FLAVOR: vs2017
    ## (broken cmake) 
    ## (broken cmake)     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    ## (broken cmake)       SIMH_BUILD_FLAVOR: vs2015
    ## (broken cmake) 
    ## (broken cmake)     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    ## (broken cmake)       SIMH_BUILD_FLAVOR: vs2013
    ## (broken cmake) 
    ## (broken cmake)     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    ## (broken cmake)       SIMH_BUILD_FLAVOR: vs2012
    ## (broken cmake) 
    ## (broken cmake)     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    ## (broken cmake)       SIMH_BUILD_FLAVOR: vs2008
    ## (broken cmake) 
    ## (broken cmake)     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    ## (broken cmake)       SIMH_BUILD_FLAVOR: mingw
    ## (broken cmake)       MINGW: C:\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0

    ## Here's how you would build with Ninja. It's going to build the same executables
    ## as the MinGW flavor, which is why it's skipped here.
    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    #   SIMH_BUILD_FLAVOR: ninja
    #   MINGW: C:\\msys64\\mingw32\\bin
    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    #   SIMH_BUILD_FLAVOR: 2017
    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    #   SIMH_BUILD_FLAVOR: 2015

matrix:
  ## Bail if a job fails, don't start new ones.
  fast_finish: true

skip_commits:
  files:
    - 'doc/*'
    - '**/*.md'

configuration:
  - Debug
  - Release

build:
  parallel: true                  # enable MSBuild parallel builds
  verbosity: minimal

before_build:
  - ps: |
      if ($isWindows) {
        if (${env:SIMH_BUILD_FLAVOR} -eq "ninja") { choco install ninja; }
        if (!(Test-Path -Path cmake\dependencies)) { New-Item -ItemType Directory -Path cmake\dependencies }
      }
  - sh: |
      sudo apt-get -y update
      sudo apt-get install -ym pkg-config libsdl2-dev libsdl2-ttf-dev libpcap-dev libvdeplug-dev
      sudo apt-get install -ym libedit-dev

build_script:
  # Run the cmake-builder script all the way through: generate, build, test, install.
  - ps: |
      if ($isWindows) {
        if (!([string]::IsNullOrEmpty($env:MINGW))) { $env:PATH=$(@(${env:MINGW}, ${env:PATH}) -join ";"); };
        cmake\cmake-builder.ps1 -clean -notest -noinstall -config ${env:CONFIGURATION} -flavor ${env:SIMH_BUILD_FLAVOR}
      }
  - sh: |
      cmake/cmake-builder.sh --flavor ${SIMH_BUILD_FLAVOR} --config ${CONFIGURATION} --clean --notest --noinstall

test_script:
  - ps: |
      if ($isWindows) {
        Write-Output "cmake\cmake-builder.ps1 -testonly -config ${env:CONFIGURATION} -flavor ${env:SIMH_BUILD_FLAVOR}"
        cmake\cmake-builder.ps1 -testonly -config ${env:CONFIGURATION} -flavor ${env:SIMH_BUILD_FLAVOR}
      }
  - sh: |
      cmake/cmake-builder.sh --testonly --config ${CONFIGURATION} --flavor ${SIMH_BUILD_FLAVOR}

# notifications:
#   - provider: Email
#     to:
#       - Mark@infocomm.com
#       - lars@nocrew.org
#     on_build_success: false
