name: Build

on: [pull_request, push]

defaults:
  run:
    shell: bash

jobs:
  cmake-unix:
    name: CMake Ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sh -ex .travis/deps.sh linux
          sudo apt install -ym ninja-build
      - name: cmake-builder.sh
        run: |
          cmake/cmake-builder.sh --config Release --flavor ninja --lto --notest --noinstall --parallel --verbose
      - name: SIMH simulator suite test
        run: |
          cmake/cmake-builder.sh --config Release --flavor ninja --testonly

  cmake-macosx:
    name: CMake Mac OSX
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12]
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sh -ex .travis/deps.sh osx
      - name: cmake-builder.sh
        run: |
          cmake/cmake-builder.sh --config Release --flavor xcode --lto --notest --noinstall
      - name: SIMH simulator suite test
        run: |
          cmake/cmake-builder.sh --config Release --flavor xcode --testonly

  cmake-vs2022xp:
    name: VS 2022 XP-compatible LEGACY
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v3

      ## NOTE: This will have to change when Github updates the windows-latest
      ## image AND when Microsoft bumps the Visual Studio year.
      ##
      ## Things that need updating:
      ## - Product ID (maybe: MS seems to be very consistent with the component
      ##   name, hasn't changed since VS 2019.)
      ## - Channel ID

      - name: Install v141_xp (XP toolkit)
        shell: pwsh
        run: |
            $ErrorActionPreference = "Stop"
            $packageParams = @( "--productId", "Microsoft.VisualStudio.Product.Enterprise", 
                "--channelId", "VisualStudio.17.Release",
                "--add", "Microsoft.VisualStudio.Component.VC.v141.x86.x64",
                "--add", "Microsoft.VisualStudio.Component.WinXP",
                "--no-includeRecommended",
                "--includeOptional",
                "--quiet",
                "--locale en-US" ) -join " "
            choco install visualstudio2022-workload-nativedesktop --package-parameters $packageParams

      - name: vs2022-xp build
        shell: pwsh
        run: |
            $ErrorActionPreference = "Stop"
            $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
            Update-SessionEnvironment
            # Fix PATH so that "C:\Strawberry" (Strawberry Perl) doesn't mess with the build
            # CMake WILL find incompatible libraries within Strawberry.
            $fixPATH = $env:Path
            foreach ($path in ${fixPATH}.Split(";")) {
                if ($path -like "*\Strawberry\*" -or $path -like "*/Strawberry/*") {
                    $fixPATH = $fixPATH.Replace($path ,"")
                }
            }
            $env:Path = $fixPATH
            ./cmake/cmake-builder.ps1 -flavor vs2022-xp -config Release -clean -lto -verbose -notest -noinstall
      - name: SIMH simulator suite test
        shell: pwsh
        run: |
            ./cmake/cmake-builder.ps1 -flavor vs2022-xp -config Release -testOnly
      - name: SIMH simulator suite install and package
        shell: pwsh
        run: |
            ./cmake/cmake-builder.ps1 -flavor vs2022-xp -config Release -installOnly
            ./cmake/cmake-builder.ps1 -flavor vs2022-xp -config Release -package

      - uses: actions/upload-artifact@v3
        with:
          name: simh-4.0.0-win32-vs2022xp
          path: cmake/build-vs2022-xp/simh-4.0.0-win32-Release-vs2022xp.zip

  cmake-vs2022:
    name: VS 2022 Win10 native VCPKG
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v3

      - name: vs2022 build
        shell: pwsh
        run: |
            $ErrorActionPreference = "Stop"
            # Fix PATH so that "C:\Strawberry" (Strawberry Perl) doesn't mess with the build
            # CMake WILL find incompatible libraries within Strawberry.
            $fixPATH = $env:Path
            foreach ($path in ${fixPATH}.Split(";")) {
                if ($path -like "*\Strawberry\*" -or $path -like "*/Strawberry/*") {
                    $fixPATH = $fixPATH.Replace($path, "")
                }
            }
            $env:Path = $fixPATH
            # Make this a vcpkg build:
            $env:VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT
            Push-Location $env:VCPKG_ROOT
            git pull
            Pop-Location
            ./cmake/cmake-builder.ps1 -flavor vs2022 -config Release -clean -lto -verbose -notest -noinstall
      - name: SIMH simulator suite test
        shell: pwsh
        run: |
            ./cmake/cmake-builder.ps1 -flavor vs2022 -config Release -testOnly
      - name: SIMH simulator suite install and package
        shell: pwsh
        run: |
            ./cmake/cmake-builder.ps1 -flavor vs2022 -config Release -installOnly
            ./cmake/cmake-builder.ps1 -flavor vs2022 -config Release -package

      - uses: actions/upload-artifact@v3
        with:
          name: simh-4.0.0-win32-vs2022
          path: cmake/build-vs2022/simh-4.0.0-win32-Release-vs2022.zip

  makefile:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ## macos-10.15: Runner seems to be officially disabled, results in canceled
        ## builds. Leaving this "as-is".
        ##
        os: [macos-12, ubuntu-20.04]
        simulators:
          # These are supposed to match ALL in makefile.
          # Each job builds ~15 simulators.
          - pdp1 pdp4 pdp6 pdp7 pdp8 pdp9 pdp10 pdp10-ka pdp10-ki pdp10-kl pdp10-ks pdp11 pdp15 vax 
          - microvax2 vax730 vax750 vax780 vax8200 vax8600 microvax2000 infoserver100 infoserver150vxt microvax3100 microvax3100e vaxstation3100m30 vaxstation3100m38 
          - microvax3100m80 vaxstation4000vlc infoserver1000 nova eclipse hp2100 hp3000 i1401 i1620 s3 altair altairz80 gri i7094 
          - id16 id32 sds lgp h316 cdc1700 swtp6800mp-a swtp6800mp-a2 tx-0 ssem b5500 sage pdq3 alpha
          - besm6 imlac tt2500 microvax3900 microvax1 rtvax1000 vaxstation3100m76 vaxstation4000m60
          - scelbi 3b2 i701 i704 i7010 i7070 i7080 i7090 sigma uc15 i650 sel32 intel-mds ibm1130
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        if: ${{runner.os == 'macOS'}}
        run: sh -ex .travis/deps.sh osx
      - name: Install dependencies
        if: ${{runner.os == 'Linux'}}
        run: sh -ex .travis/deps.sh linux
      - name: makefile build
        env:
          SIM: ${{matrix.simulators}}
        run: make LTO=1 OPTIMIZE=-O3 $SIM
