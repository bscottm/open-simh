name: CMake build workflows

on:
  workflow_call:

jobs:
  cmake-unix:
    name: CMake Ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        sh -ex .travis/deps.sh linux
        sudo apt install -ym ninja-build
    - name: cmake-builder.sh
      run: |
        cmake/cmake-builder.sh --config Release --flavor ninja --lto --notest --parallel --verbose --cpack_suffix ${{matrix.os}}
    - name: SIMH simulator suite test
      run: |
        cmake/cmake-builder.sh --config Release --flavor ninja --testonly
    - name: SIMH pack
      run: |
        cd cmake/build-ninja
        cpack -G DEB -C Release
    - name: Upload DEB
      uses: actions/upload-artifact@v3
      with:
        name: simh-4.0.0-${{matrix.os}}.deb
        path: cmake/build-ninja/simh-4.0.0-${{matrix.os}}.deb

  # cmake-macosx:
  #   name: CMake Mac OSX
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-12]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Install dependencies
  #     run: |
  #       sh -ex .travis/deps.sh osx
  #   - name: cmake-builder.sh
  #     run: |
  #       cmake/cmake-builder.sh --config Release --flavor xcode --lto --notest
  #   - name: SIMH simulator suite test
  #     run: |
  #       cmake/cmake-builder.sh --config Release --flavor xcode --testonly


  # cmake-vs2022xp:
  #   name: VS 2022 XP-compatible LEGACY
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v3

  #   ## NOTE: This will have to change when Github updates the windows-latest
  #   ## image AND when Microsoft bumps the Visual Studio year.
  #   ##
  #   ## Things that need updating:
  #   ## - Product ID (maybe: MS seems to be very consistent with the component
  #   ##   name, hasn't changed since VS 2019.)
  #   ## - Channel ID
  #   - name: Install v141_xp (XP toolkit)
  #     shell: pwsh
  #     run: |
  #         $ErrorActionPreference = "Stop"
  #         $packageParams = @( "--productId", "Microsoft.VisualStudio.Product.Enterprise", 
  #             "--channelId", "VisualStudio.17.Release",
  #             "--add", "Microsoft.VisualStudio.Component.VC.v141.x86.x64",
  #             "--add", "Microsoft.VisualStudio.Component.WinXP",
  #             "--no-includeRecommended",
  #             "--includeOptional",
  #             "--quiet",
  #             "--locale en-US" ) -join " "
  #         choco install visualstudio2022-workload-nativedesktop --package-parameters $packageParams

  #   - name: vs2022-xp build
  #     shell: pwsh
  #     run: |
  #         $ErrorActionPreference = "Stop"
  #         $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."
  #         Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
  #         Update-SessionEnvironment
  #         # Fix PATH so that "C:\Strawberry" (Strawberry Perl) doesn't mess with the build
  #         # CMake WILL find incompatible libraries within Strawberry.
  #         $fixPATH = $env:Path
  #         foreach ($path in ${fixPATH}.Split(";")) {
  #             if ($path -like "*\Strawberry\*" -or $path -like "*/Strawberry/*") {
  #                 $fixPATH = $fixPATH.Replace($path ,"")
  #             }
  #         }
  #         $env:Path = $fixPATH
  #         ./cmake/cmake-builder.ps1 -flavor vs2022-xp -config Release -clean -lto -verbose -notest -cpack_suffix win32-xp
  #   - name: SIMH simulator suite test
  #     shell: pwsh
  #     run: |
  #         ./cmake/cmake-builder.ps1 -flavor vs2022-xp -config Release -testOnly
  #   - name: SIMH simulator suite install and package
  #     shell: pwsh
  #     run: |
  #         cd cmake\build-vs2022-xp
  #         cpack -G ZIP -C Release
  #   - name: Upload ZIP
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: simh-4.0.0-win32-vs2022xp.zip
  #       path: cmake/build-vs2022-xp/simh-4.0.0-win32-xp.zip
      
  # cmake-vs2022:
  #   name: VS 2022 Win10 native VCPKG
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: vs2022 build
  #     shell: pwsh
  #     run: |
  #         $ErrorActionPreference = "Stop"
  #         # Fix PATH so that "C:\Strawberry" (Strawberry Perl) doesn't mess with the build
  #         # CMake WILL find incompatible libraries within Strawberry.
  #         $fixPATH = (${env:PATH}.Split(';') | `
  #             Where-Object { $_ -notlike "*\Strawberry\*" -and $_ -notlike "*/Strawberry/*" }) -join ';'
  #         $env:PATH = $fixPATH
  #         # Make this a vcpkg build:
  #         $env:VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT
  #         Push-Location $env:VCPKG_ROOT
  #         git pull
  #         Pop-Location
  #         ./cmake/cmake-builder.ps1 -flavor vs2022 -config Release -clean -lto -verbose -notest -cpack_suffix win32-native
  #   - name: SIMH simulator suite test
  #     shell: pwsh
  #     run: |
  #         ./cmake/cmake-builder.ps1 -flavor vs2022 -config Release -testOnly
  #   - name: SIMH simulator suite package
  #     shell: pwsh
  #     run: |
  #         cd cmake\build-vs2022
  #         cpack -G "NSIS;WIX;ZIP" -C Release
  #   - name: Upload ZIP
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: simh-4.0.0-win32-vs2022.zip
  #       path: cmake/build-vs2022/simh-4.0.0-win32-native.zip
  #   - name: Upload EXE installer
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: simh-4.0.0-win32-vs2022.exe
  #       path: cmake/build-vs2022/simh-4.0.0-win32-native.exe
  #   - name: Upload MSI installer
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: simh-4.0.0-win32-vs2022.msi
  #       path: cmake/build-vs2022/simh-4.0.0-win32-native.msi
  